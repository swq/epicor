//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace bxmc.sr_oa {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://tempuri.org/EF2KGateWay/message/", ConfigurationName="sr_oa.EFNETServiceSoap")]
    public interface EFNETServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ReGetPDF", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        void ReGetPDF(string pFormId, string pSheetNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ReGetPDF", ReplyAction="*")]
        System.Threading.Tasks.Task ReGetPDFAsync(string pFormId, string pSheetNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/zToolsTest_01_GetEZFlowPath", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string zToolsTest_01_GetEZFlowPath();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/zToolsTest_01_GetEZFlowPath", ReplyAction="*")]
        System.Threading.Tasks.Task<string> zToolsTest_01_GetEZFlowPathAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/zToolsTest_02_GetSQLConnenction", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string zToolsTest_02_GetSQLConnenction();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/zToolsTest_02_GetSQLConnenction", ReplyAction="*")]
        System.Threading.Tasks.Task<string> zToolsTest_02_GetSQLConnenctionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/zToolsTest_03_CheckXMLFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string zToolsTest_03_CheckXMLFile(string strEFSiteName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/zToolsTest_03_CheckXMLFile", ReplyAction="*")]
        System.Threading.Tasks.Task<string> zToolsTest_03_CheckXMLFileAsync(string strEFSiteName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/zToolsTest_04_ConnectToWFERP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string zToolsTest_04_ConnectToWFERP(string strERPServerIP, string strComfirmObject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/zToolsTest_04_ConnectToWFERP", ReplyAction="*")]
        System.Threading.Tasks.Task<string> zToolsTest_04_ConnectToWFERPAsync(string strERPServerIP, string strComfirmObject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/zToolsTest_05_ConnectToEF", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string zToolsTest_05_ConnectToEF();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/zToolsTest_05_ConnectToEF", ReplyAction="*")]
        System.Threading.Tasks.Task<string> zToolsTest_05_ConnectToEFAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/zToolsTest_06_CreateDataSet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string zToolsTest_06_CreateDataSet();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/zToolsTest_06_CreateDataSet", ReplyAction="*")]
        System.Threading.Tasks.Task<string> zToolsTest_06_CreateDataSetAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/zToolsTest_07_FindEmplName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string zToolsTest_07_FindEmplName(string strEmpID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/zToolsTest_07_FindEmplName", ReplyAction="*")]
        System.Threading.Tasks.Task<string> zToolsTest_07_FindEmplNameAsync(string strEmpID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/zToolsTest_08_GetEFFormID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string zToolsTest_08_GetEFFormID();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/zToolsTest_08_GetEFFormID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> zToolsTest_08_GetEFFormIDAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/zToolsTest_09_GetERPFormKey", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string zToolsTest_09_GetERPFormKey(string strERPFormID, string strEFSiteName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/zToolsTest_09_GetERPFormKey", ReplyAction="*")]
        System.Threading.Tasks.Task<string> zToolsTest_09_GetERPFormKeyAsync(string strERPFormID, string strEFSiteName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/zToolsTest_10_GetMultiLanguage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string zToolsTest_10_GetMultiLanguage(string strLangID, string intAction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/zToolsTest_10_GetMultiLanguage", ReplyAction="*")]
        System.Threading.Tasks.Task<string> zToolsTest_10_GetMultiLanguageAsync(string strLangID, string intAction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/zToolsTest_11_GetMailSetting", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string zToolsTest_11_GetMailSetting(string strSiteName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/zToolsTest_11_GetMailSetting", ReplyAction="*")]
        System.Threading.Tasks.Task<string> zToolsTest_11_GetMailSettingAsync(string strSiteName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/zToolsTest_12_WFERPProgIDIsExits", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string zToolsTest_12_WFERPProgIDIsExits(string strSiteName, string strERP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/zToolsTest_12_WFERPProgIDIsExits", ReplyAction="*")]
        System.Threading.Tasks.Task<string> zToolsTest_12_WFERPProgIDIsExitsAsync(string strSiteName, string strERP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/zToolsTest_13_SoapExceptionTest", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string zToolsTest_13_SoapExceptionTest(int i, int j);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/zToolsTest_13_SoapExceptionTest", ReplyAction="*")]
        System.Threading.Tasks.Task<string> zToolsTest_13_SoapExceptionTestAsync(int i, int j);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/E10GetApproveLog", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string E10GetApproveLog(string tFormID, string tSheetNo, string strXMLInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/E10GetApproveLog", ReplyAction="*")]
        System.Threading.Tasks.Task<string> E10GetApproveLogAsync(string tFormID, string tSheetNo, string strXMLInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/getcondValue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string getcondValue(string strOrgGuid, string strProgramID, string strSourceFormID, string strSiteName, string XMLDoc, string strPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/getcondValue", ReplyAction="*")]
        System.Threading.Tasks.Task<string> getcondValueAsync(string strOrgGuid, string strProgramID, string strSourceFormID, string strSiteName, string XMLDoc, string strPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetMenuData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string GetMenuData(string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetMenuData", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetMenuDataAsync(string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetUserToken", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string GetUserToken(string pXmlIn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetUserToken", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetUserTokenAsync(string pXmlIn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/CheckUserAuth", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string CheckUserAuth(string pXmlIn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/CheckUserAuth", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CheckUserAuthAsync(string pXmlIn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetOrganizationList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string GetOrganizationList(string pXmlIn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetOrganizationList", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetOrganizationListAsync(string pXmlIn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/DoEasyFlowLogOut", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string DoEasyFlowLogOut(string userId, string srcIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/DoEasyFlowLogOut", ReplyAction="*")]
        System.Threading.Tasks.Task<string> DoEasyFlowLogOutAsync(string userId, string srcIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetTodoListTotalSize", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string GetTodoListTotalSize(string xmlRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetTodoListTotalSize", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetTodoListTotalSizeAsync(string xmlRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetTodoList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string GetTodoList(string xmlRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetTodoList", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetTodoListAsync(string xmlRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/SyncAccountData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string SyncAccountData(string pXmlIn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/SyncAccountData", ReplyAction="*")]
        System.Threading.Tasks.Task<string> SyncAccountDataAsync(string pXmlIn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetNoticeApproveStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string GetNoticeApproveStatus(string pXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetNoticeApproveStatus", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetNoticeApproveStatusAsync(string pXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/RemoteMethod", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string RemoteMethod(string varPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/RemoteMethod", ReplyAction="*")]
        System.Threading.Tasks.Task<string> RemoteMethodAsync(string varPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/RemoteCreateForm", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string[] RemoteCreateForm(string varPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/RemoteCreateForm", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> RemoteCreateFormAsync(string varPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetMCloudEasyFlowService", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string GetMCloudEasyFlowService(string strXMLInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetMCloudEasyFlowService", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetMCloudEasyFlowServiceAsync(string strXMLInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/CheckLoginPsw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        bool CheckLoginPsw(string pUid, string pPwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/CheckLoginPsw", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> CheckLoginPswAsync(string pUid, string pPwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/findAllEmpByBossID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string findAllEmpByBossID(string pUid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/findAllEmpByBossID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> findAllEmpByBossIDAsync(string pUid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/findNameByEmpID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string findNameByEmpID(string pUid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/findNameByEmpID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> findNameByEmpIDAsync(string pUid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/findEFFormIdByEMSId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string findEFFormIdByEMSId(string pUid, string pEMSId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/findEFFormIdByEMSId", ReplyAction="*")]
        System.Threading.Tasks.Task<string> findEFFormIdByEMSIdAsync(string pUid, string pEMSId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/insertemsmb", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string insertemsmb(string pUid, string pkey1, string pkey2, string pkey3);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/insertemsmb", ReplyAction="*")]
        System.Threading.Tasks.Task<string> insertemsmbAsync(string pUid, string pkey1, string pkey2, string pkey3);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/getFormStateAndResult", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string getFormStateAndResult(string pUid, string pSheetNo, string pLang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/getFormStateAndResult", ReplyAction="*")]
        System.Threading.Tasks.Task<string> getFormStateAndResultAsync(string pUid, string pSheetNo, string pLang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/sendMail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string sendMail(string pUid, string pAryUid, string pSubject, string pBody);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/sendMail", ReplyAction="*")]
        System.Threading.Tasks.Task<string> sendMailAsync(string pUid, string pAryUid, string pSubject, string pBody);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/findAllLeftEmpID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string findAllLeftEmpID(string pUid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/findAllLeftEmpID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> findAllLeftEmpIDAsync(string pUid);
        
        // CODEGEN: 消息 findFormSupervisorToEmpIDRequest 的包装命名空间(http://tempuri.org/EF2KGateWay/message/literalTypes)以后生成的消息协定与默认值(http://tempuri.org/EF2KGateWay/message/)不匹配
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/findFormSupervisorToEmpID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bxmc.sr_oa.findFormSupervisorToEmpIDResponse findFormSupervisorToEmpID(bxmc.sr_oa.findFormSupervisorToEmpIDRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/findFormSupervisorToEmpID", ReplyAction="*")]
        System.Threading.Tasks.Task<bxmc.sr_oa.findFormSupervisorToEmpIDResponse> findFormSupervisorToEmpIDAsync(bxmc.sr_oa.findFormSupervisorToEmpIDRequest request);
        
        // CODEGEN: 消息 findAppFormToEFgetContentRequest 的包装命名空间(http://tempuri.org/EF2KGateWay/message/literalTypes)以后生成的消息协定与默认值(http://tempuri.org/EF2KGateWay/message/)不匹配
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/findAppFormToEFgetContent", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bxmc.sr_oa.findAppFormToEFgetContentResponse findAppFormToEFgetContent(bxmc.sr_oa.findAppFormToEFgetContentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/findAppFormToEFgetContent", ReplyAction="*")]
        System.Threading.Tasks.Task<bxmc.sr_oa.findAppFormToEFgetContentResponse> findAppFormToEFgetContentAsync(bxmc.sr_oa.findAppFormToEFgetContentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/insertemsma", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string insertemsma(string pUid, string pkey1, string pkey2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/insertemsma", ReplyAction="*")]
        System.Threading.Tasks.Task<string> insertemsmaAsync(string pUid, string pkey1, string pkey2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/deleteemsma", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string deleteemsma(string pUid, string pkey1, string pkey2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/deleteemsma", ReplyAction="*")]
        System.Threading.Tasks.Task<string> deleteemsmaAsync(string pUid, string pkey1, string pkey2);
        
        // CODEGEN: 消息 GetMIMJDataSetRequest 的包装命名空间(http://tempuri.org/EF2KGateWay/message/literalTypes)以后生成的消息协定与默认值(http://tempuri.org/EF2KGateWay/message/)不匹配
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetMIMJDataSet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bxmc.sr_oa.GetMIMJDataSetResponse GetMIMJDataSet(bxmc.sr_oa.GetMIMJDataSetRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetMIMJDataSet", ReplyAction="*")]
        System.Threading.Tasks.Task<bxmc.sr_oa.GetMIMJDataSetResponse> GetMIMJDataSetAsync(bxmc.sr_oa.GetMIMJDataSetRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/callBackEFService", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string callBackEFService(string pXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/callBackEFService", ReplyAction="*")]
        System.Threading.Tasks.Task<string> callBackEFServiceAsync(string pXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/invokePLUSService", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string invokePLUSService(string pXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/invokePLUSService", ReplyAction="*")]
        System.Threading.Tasks.Task<string> invokePLUSServiceAsync(string pXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/invokeESSService", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string invokeESSService(string pXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/invokeESSService", ReplyAction="*")]
        System.Threading.Tasks.Task<string> invokeESSServiceAsync(string pXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/invokeDMSService", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string invokeDMSService(string pXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/invokeDMSService", ReplyAction="*")]
        System.Threading.Tasks.Task<string> invokeDMSServiceAsync(string pXml);
        
        // CODEGEN: 消息 getMenuDataESSRequest 的包装命名空间(http://tempuri.org/EF2KGateWay/message/literalTypes)以后生成的消息协定与默认值(http://tempuri.org/EF2KGateWay/message/)不匹配
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/getMenuDataESS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bxmc.sr_oa.getMenuDataESSResponse getMenuDataESS(bxmc.sr_oa.getMenuDataESSRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/getMenuDataESS", ReplyAction="*")]
        System.Threading.Tasks.Task<bxmc.sr_oa.getMenuDataESSResponse> getMenuDataESSAsync(bxmc.sr_oa.getMenuDataESSRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/setUserData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        bool setUserData(string pXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/setUserData", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> setUserDataAsync(string pXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/callPlusToSave", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        bool callPlusToSave(string pXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/callPlusToSave", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> callPlusToSaveAsync(string pXml);
        
        // CODEGEN: 消息 callPlusPollingToGetDataRequest 的包装命名空间(http://tempuri.org/EF2KGateWay/message/literalTypes)以后生成的消息协定与默认值(http://tempuri.org/EF2KGateWay/message/)不匹配
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/callPlusPollingToGetData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bxmc.sr_oa.callPlusPollingToGetDataResponse callPlusPollingToGetData(bxmc.sr_oa.callPlusPollingToGetDataRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/callPlusPollingToGetData", ReplyAction="*")]
        System.Threading.Tasks.Task<bxmc.sr_oa.callPlusPollingToGetDataResponse> callPlusPollingToGetDataAsync(bxmc.sr_oa.callPlusPollingToGetDataRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/callPlusCheckSaveStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string callPlusCheckSaveStatus(string pXml, string pActionNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/callPlusCheckSaveStatus", ReplyAction="*")]
        System.Threading.Tasks.Task<string> callPlusCheckSaveStatusAsync(string pXml, string pActionNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/getColumnSet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string getColumnSet(string pXml, string pLang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/getColumnSet", ReplyAction="*")]
        System.Threading.Tasks.Task<string> getColumnSetAsync(string pXml, string pLang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/HRMGateWay", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string HRMGateWay(string pXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/HRMGateWay", ReplyAction="*")]
        System.Threading.Tasks.Task<string> HRMGateWayAsync(string pXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/doAsyncToSetStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string doAsyncToSetStatus(string pFormId, string pSheetNo, bool pUserWithDraw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/doAsyncToSetStatus", ReplyAction="*")]
        System.Threading.Tasks.Task<string> doAsyncToSetStatusAsync(string pFormId, string pSheetNo, bool pUserWithDraw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/doSyncToSetStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        object[] doSyncToSetStatus(string pFormId, string pSheetNo, bool pUserWithDraw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/doSyncToSetStatus", ReplyAction="*")]
        System.Threading.Tasks.Task<object[]> doSyncToSetStatusAsync(string pFormId, string pSheetNo, bool pUserWithDraw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/doScheduleMail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        void doScheduleMail(string pAgentPath, string pArguments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/doScheduleMail", ReplyAction="*")]
        System.Threading.Tasks.Task doScheduleMailAsync(string pAgentPath, string pArguments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/doAsyncCreateYEIEInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string doAsyncCreateYEIEInfo(string pFormId, string pSheetNo, string pSerialNo, string pScheduleMailSID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/doAsyncCreateYEIEInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<string> doAsyncCreateYEIEInfoAsync(string pFormId, string pSheetNo, string pSerialNo, string pScheduleMailSID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/doSyncCreateYEIEInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        object[] doSyncCreateYEIEInfo(string pFormId, string pSheetNo, string pSerialNo, string pScheduleMailSID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/doSyncCreateYEIEInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<object[]> doSyncCreateYEIEInfoAsync(string pFormId, string pSheetNo, string pSerialNo, string pScheduleMailSID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/doAsyncGroupApprove", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        void doAsyncGroupApprove(string pGUID, string pLang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/doAsyncGroupApprove", ReplyAction="*")]
        System.Threading.Tasks.Task doAsyncGroupApproveAsync(string pGUID, string pLang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/doAsyncToolsRemoteCreateForm", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        void doAsyncToolsRemoteCreateForm(string pXML, string pBackupERPTable, string pERPComplexPK);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/doAsyncToolsRemoteCreateForm", ReplyAction="*")]
        System.Threading.Tasks.Task doAsyncToolsRemoteCreateFormAsync(string pXML, string pBackupERPTable, string pERPComplexPK);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/doSyncToolsRemoteCreateForm", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        void doSyncToolsRemoteCreateForm(string pXML, string pBackupERPTable, string pERPComplexPK);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/doSyncToolsRemoteCreateForm", ReplyAction="*")]
        System.Threading.Tasks.Task doSyncToolsRemoteCreateFormAsync(string pXML, string pBackupERPTable, string pERPComplexPK);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/getMaxRequestLength", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        long getMaxRequestLength();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/getMaxRequestLength", ReplyAction="*")]
        System.Threading.Tasks.Task<long> getMaxRequestLengthAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetEFNETLoginID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string GetEFNETLoginID(string strUserID, string tLang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetEFNETLoginID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetEFNETLoginIDAsync(string strUserID, string tLang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/CheckDoEasyCallBack", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string CheckDoEasyCallBack(string pXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/CheckDoEasyCallBack", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CheckDoEasyCallBackAsync(string pXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/DoEasyCallBack", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string DoEasyCallBack(string pXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/DoEasyCallBack", ReplyAction="*")]
        System.Threading.Tasks.Task<string> DoEasyCallBackAsync(string pXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/getAllUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string getAllUser(string strXMLInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/getAllUser", ReplyAction="*")]
        System.Threading.Tasks.Task<string> getAllUserAsync(string strXMLInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/sendBepMessages", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string sendBepMessages(string strXMLInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/sendBepMessages", ReplyAction="*")]
        System.Threading.Tasks.Task<string> sendBepMessagesAsync(string strXMLInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/doAsyncToE10Create", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string doAsyncToE10Create(string pFormId, string pSheetNo, string pXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/doAsyncToE10Create", ReplyAction="*")]
        System.Threading.Tasks.Task<string> doAsyncToE10CreateAsync(string pFormId, string pSheetNo, string pXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ReSetSYSBA", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        void ReSetSYSBA();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ReSetSYSBA", ReplyAction="*")]
        System.Threading.Tasks.Task ReSetSYSBAAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/doE10SetStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        object[] doE10SetStatus(string pXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/doE10SetStatus", ReplyAction="*")]
        System.Threading.Tasks.Task<object[]> doE10SetStatusAsync(string pXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/invokeSrv", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string invokeSrv(string pPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/invokeSrv", ReplyAction="*")]
        System.Threading.Tasks.Task<string> invokeSrvAsync(string pPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/callbackSrv", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string callbackSrv(string pPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/callbackSrv", ReplyAction="*")]
        System.Threading.Tasks.Task<string> callbackSrvAsync(string pPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/syncProd", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string syncProd(string pPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/syncProd", ReplyAction="*")]
        System.Threading.Tasks.Task<string> syncProdAsync(string pPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ERP_GetEFFormID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string ERP_GetEFFormID(string varPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ERP_GetEFFormID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ERP_GetEFFormIDAsync(string varPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ERP_GetFormCondField", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string ERP_GetFormCondField(string varPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ERP_GetFormCondField", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ERP_GetFormCondFieldAsync(string varPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ERP_GET_APPROVE_RECORD", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string ERP_GET_APPROVE_RECORD(string varParaOfXMLFormat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ERP_GET_APPROVE_RECORD", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ERP_GET_APPROVE_RECORDAsync(string varParaOfXMLFormat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ERP_GET_APPROVE_RECORD_ARRAY", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string ERP_GET_APPROVE_RECORD_ARRAY(string varParaOfXMLFormat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ERP_GET_APPROVE_RECORD_ARRAY", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ERP_GET_APPROVE_RECORD_ARRAYAsync(string varParaOfXMLFormat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ERP_CreateEFForm", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string ERP_CreateEFForm(string varParaOfXMLFormat, string strMark, string strAtt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ERP_CreateEFForm", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ERP_CreateEFFormAsync(string varParaOfXMLFormat, string strMark, string strAtt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ERP_DeSerializationByte", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        object ERP_DeSerializationByte(string tSerial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ERP_DeSerializationByte", ReplyAction="*")]
        System.Threading.Tasks.Task<object> ERP_DeSerializationByteAsync(string tSerial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ERP_SerializationByte", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string ERP_SerializationByte([System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")] byte[] arySerial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ERP_SerializationByte", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ERP_SerializationByteAsync([System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")] byte[] arySerial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ERP_SerializationString", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string ERP_SerializationString(string strSerial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ERP_SerializationString", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ERP_SerializationStringAsync(string strSerial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ERP_GetApproveStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string ERP_GetApproveStatus(string varParaOfXMLFormat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ERP_GetApproveStatus", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ERP_GetApproveStatusAsync(string varParaOfXMLFormat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ERP_IsEFConnected", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string ERP_IsEFConnected(string varPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ERP_IsEFConnected", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ERP_IsEFConnectedAsync(string varPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetIntegrateProtocol", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string GetIntegrateProtocol();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetIntegrateProtocol", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetIntegrateProtocolAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetApproveOpinion", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string GetApproveOpinion(string varPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetApproveOpinion", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetApproveOpinionAsync(string varPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetFormFlow", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string GetFormFlow(string varPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetFormFlow", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetFormFlowAsync(string varPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/getERPFormXML", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string getERPFormXML(string strSiteName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/getERPFormXML", ReplyAction="*")]
        System.Threading.Tasks.Task<string> getERPFormXMLAsync(string strSiteName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/getERPFormList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string getERPFormList(string strSiteName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/getERPFormList", ReplyAction="*")]
        System.Threading.Tasks.Task<string> getERPFormListAsync(string strSiteName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/checkERPFormName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        bool checkERPFormName(string strInputNmae, string strSiteName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/checkERPFormName", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> checkERPFormNameAsync(string strInputNmae, string strSiteName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/getERPFormKey", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        int getERPFormKey(string strInputName, string strSiteName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/getERPFormKey", ReplyAction="*")]
        System.Threading.Tasks.Task<int> getERPFormKeyAsync(string strInputName, string strSiteName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/getVersion", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        int getVersion(string strSiteName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/getVersion", ReplyAction="*")]
        System.Threading.Tasks.Task<int> getVersionAsync(string strSiteName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/getERPServerIPByForm", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string getERPServerIPByForm(string strInputSet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/getERPServerIPByForm", ReplyAction="*")]
        System.Threading.Tasks.Task<string> getERPServerIPByFormAsync(string strInputSet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/delTempRecord", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string delTempRecord(string strSerialNumber, string strSiteName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/delTempRecord", ReplyAction="*")]
        System.Threading.Tasks.Task<string> delTempRecordAsync(string strSerialNumber, string strSiteName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/saveERPInfoToTemp", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string saveERPInfoToTemp(string htString, string strSiteName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/saveERPInfoToTemp", ReplyAction="*")]
        System.Threading.Tasks.Task<string> saveERPInfoToTempAsync(string htString, string strSiteName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/getFormID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string getFormID(string strSiteName, string strProgID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/getFormID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> getFormIDAsync(string strSiteName, string strProgID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/getAppPath", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string getAppPath();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/getAppPath", ReplyAction="*")]
        System.Threading.Tasks.Task<string> getAppPathAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/getProgID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string getProgID(string strSiteName, string strFormID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/getProgID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> getProgIDAsync(string strSiteName, string strFormID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/getERPServerIP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string getERPServerIP(string strSiteName, string strFormID, string strProgID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/getERPServerIP", ReplyAction="*")]
        System.Threading.Tasks.Task<string> getERPServerIPAsync(string strSiteName, string strFormID, string strProgID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ChkERP_BeforeApprove", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        object[] ChkERP_BeforeApprove(string dicInputSet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ChkERP_BeforeApprove", ReplyAction="*")]
        System.Threading.Tasks.Task<object[]> ChkERP_BeforeApproveAsync(string dicInputSet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ChkERP_BeforeApprove2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        object[] ChkERP_BeforeApprove2(string dicInputSet, string pFormId, string pSheetNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ChkERP_BeforeApprove2", ReplyAction="*")]
        System.Threading.Tasks.Task<object[]> ChkERP_BeforeApprove2Async(string dicInputSet, string pFormId, string pSheetNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/SetERP_AfterApprove", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        object[] SetERP_AfterApprove(string dicInputSet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/SetERP_AfterApprove", ReplyAction="*")]
        System.Threading.Tasks.Task<object[]> SetERP_AfterApproveAsync(string dicInputSet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/SetERP_AfterApprove2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        object[] SetERP_AfterApprove2(string dicInputSet, string pFormId, string pSheetNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/SetERP_AfterApprove2", ReplyAction="*")]
        System.Threading.Tasks.Task<object[]> SetERP_AfterApprove2Async(string dicInputSet, string pFormId, string pSheetNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/SaveFormInfoToERP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        object[] SaveFormInfoToERP(string dicInputSet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/SaveFormInfoToERP", ReplyAction="*")]
        System.Threading.Tasks.Task<object[]> SaveFormInfoToERPAsync(string dicInputSet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GenerateERPic", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        int GenerateERPic(string dicInputSet, string pWhereClause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GenerateERPic", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GenerateERPicAsync(string dicInputSet, string pWhereClause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ConnectToERP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        object[] ConnectToERP(int lngERPVersion, string strERPServerIP, string strComfirmObject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ConnectToERP", ReplyAction="*")]
        System.Threading.Tasks.Task<object[]> ConnectToERPAsync(int lngERPVersion, string strERPServerIP, string strComfirmObject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GenerateSpecialPic", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        int GenerateSpecialPic(string dicInputSet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GenerateSpecialPic", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GenerateSpecialPicAsync(string dicInputSet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetFormInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string GetFormInfo(string varPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetFormInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetFormInfoAsync(string varPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetWFFormID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string GetWFFormID(string varPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetWFFormID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetWFFormIDAsync(string varPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetModifyFlowUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string GetModifyFlowUser(string varPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetModifyFlowUser", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetModifyFlowUserAsync(string varPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetFlowAction", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string GetFlowAction(string varPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetFlowAction", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetFlowActionAsync(string varPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/DoFormApproval", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string DoFormApproval(string varPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/DoFormApproval", ReplyAction="*")]
        System.Threading.Tasks.Task<string> DoFormApprovalAsync(string varPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetBackFlow", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string GetBackFlow(string varPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetBackFlow", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetBackFlowAsync(string varPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/DoDel", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string DoDel(string varPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/DoDel", ReplyAction="*")]
        System.Threading.Tasks.Task<string> DoDelAsync(string varPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/SMERP_CreateForm", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string SMERP_CreateForm(string varPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/SMERP_CreateForm", ReplyAction="*")]
        System.Threading.Tasks.Task<string> SMERP_CreateFormAsync(string varPara);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/SMERP_GetTempPath", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string SMERP_GetTempPath();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/SMERP_GetTempPath", ReplyAction="*")]
        System.Threading.Tasks.Task<string> SMERP_GetTempPathAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ERP_UploadPIC", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string ERP_UploadPIC(string strMark, string strPath, string pUserId, string tFileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ERP_UploadPIC", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ERP_UploadPICAsync(string strMark, string strPath, string pUserId, string tFileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ERP_DoAction", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string ERP_DoAction(string pXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ERP_DoAction", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ERP_DoActionAsync(string pXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/doAsyncToERPCreate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string doAsyncToERPCreate(string pFormId, string pSheetNo, string pXML, string pERPServerIp, string pModiProg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/doAsyncToERPCreate", ReplyAction="*")]
        System.Threading.Tasks.Task<string> doAsyncToERPCreateAsync(string pFormId, string pSheetNo, string pXML, string pERPServerIp, string pModiProg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ERPFormDefinition", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string ERPFormDefinition(string pXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ERPFormDefinition", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ERPFormDefinitionAsync(string pXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ERPPreSendEFForm", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string ERPPreSendEFForm(string pXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/ERPPreSendEFForm", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ERPPreSendEFFormAsync(string pXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/action/Entry.TipTopCoordinator", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string TipTopCoordinator(string strXMLInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/action/Entry.TipTopCoordinator", ReplyAction="*")]
        System.Threading.Tasks.Task<string> TipTopCoordinatorAsync(string strXMLInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/EFPubliceCoordinator", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string EFPubliceCoordinator(string strXMLInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/EFPubliceCoordinator", ReplyAction="*")]
        System.Threading.Tasks.Task<string> EFPubliceCoordinatorAsync(string strXMLInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/YiFeiCoordinator", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string YiFeiCoordinator(string strXMLInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/YiFeiCoordinator", ReplyAction="*")]
        System.Threading.Tasks.Task<string> YiFeiCoordinatorAsync(string strXMLInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/EasyFlowCoordinator", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        object[] EasyFlowCoordinator(string pXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/EasyFlowCoordinator", ReplyAction="*")]
        System.Threading.Tasks.Task<object[]> EasyFlowCoordinatorAsync(string pXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/PubEasyFlowCoordinator", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        object[] PubEasyFlowCoordinator(string pXML, string pProd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/PubEasyFlowCoordinator", ReplyAction="*")]
        System.Threading.Tasks.Task<object[]> PubEasyFlowCoordinatorAsync(string pXML, string pProd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetOSVersion", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string GetOSVersion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetOSVersion", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetOSVersionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetCPUMode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        string GetCPUMode();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EF2KGateWay/message/GetCPUMode", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetCPUModeAsync();
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="findFormSupervisorToEmpID", WrapperNamespace="http://tempuri.org/EF2KGateWay/message/literalTypes", IsWrapped=true)]
    public partial class findFormSupervisorToEmpIDRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/EF2KGateWay/message/literalTypes", Order=0)]
        public string pUid;
        
        public findFormSupervisorToEmpIDRequest() {
        }
        
        public findFormSupervisorToEmpIDRequest(string pUid) {
            this.pUid = pUid;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="findFormSupervisorToEmpIDResponse", WrapperNamespace="http://tempuri.org/EF2KGateWay/message/literalTypes", IsWrapped=true)]
    public partial class findFormSupervisorToEmpIDResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/EF2KGateWay/message/literalTypes", Order=0)]
        public System.Data.DataSet findFormSupervisorToEmpIDResult;
        
        public findFormSupervisorToEmpIDResponse() {
        }
        
        public findFormSupervisorToEmpIDResponse(System.Data.DataSet findFormSupervisorToEmpIDResult) {
            this.findFormSupervisorToEmpIDResult = findFormSupervisorToEmpIDResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="findAppFormToEFgetContent", WrapperNamespace="http://tempuri.org/EF2KGateWay/message/literalTypes", IsWrapped=true)]
    public partial class findAppFormToEFgetContentRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/EF2KGateWay/message/literalTypes", Order=0)]
        public string pUid;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/EF2KGateWay/message/literalTypes", Order=1)]
        public string pFormID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/EF2KGateWay/message/literalTypes", Order=2)]
        public string pSheetNo;
        
        public findAppFormToEFgetContentRequest() {
        }
        
        public findAppFormToEFgetContentRequest(string pUid, string pFormID, string pSheetNo) {
            this.pUid = pUid;
            this.pFormID = pFormID;
            this.pSheetNo = pSheetNo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="findAppFormToEFgetContentResponse", WrapperNamespace="http://tempuri.org/EF2KGateWay/message/literalTypes", IsWrapped=true)]
    public partial class findAppFormToEFgetContentResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/EF2KGateWay/message/literalTypes", Order=0)]
        public string findAppFormToEFgetContentResult;
        
        public findAppFormToEFgetContentResponse() {
        }
        
        public findAppFormToEFgetContentResponse(string findAppFormToEFgetContentResult) {
            this.findAppFormToEFgetContentResult = findAppFormToEFgetContentResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetMIMJDataSet", WrapperNamespace="http://tempuri.org/EF2KGateWay/message/literalTypes", IsWrapped=true)]
    public partial class GetMIMJDataSetRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/EF2KGateWay/message/literalTypes", Order=0)]
        public string pXml;
        
        public GetMIMJDataSetRequest() {
        }
        
        public GetMIMJDataSetRequest(string pXml) {
            this.pXml = pXml;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetMIMJDataSetResponse", WrapperNamespace="http://tempuri.org/EF2KGateWay/message/literalTypes", IsWrapped=true)]
    public partial class GetMIMJDataSetResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/EF2KGateWay/message/literalTypes", Order=0)]
        public System.Data.DataSet GetMIMJDataSetResult;
        
        public GetMIMJDataSetResponse() {
        }
        
        public GetMIMJDataSetResponse(System.Data.DataSet GetMIMJDataSetResult) {
            this.GetMIMJDataSetResult = GetMIMJDataSetResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getMenuDataESS", WrapperNamespace="http://tempuri.org/EF2KGateWay/message/literalTypes", IsWrapped=true)]
    public partial class getMenuDataESSRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/EF2KGateWay/message/literalTypes", Order=0)]
        public string pXML;
        
        public getMenuDataESSRequest() {
        }
        
        public getMenuDataESSRequest(string pXML) {
            this.pXML = pXML;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getMenuDataESSResponse", WrapperNamespace="http://tempuri.org/EF2KGateWay/message/literalTypes", IsWrapped=true)]
    public partial class getMenuDataESSResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/EF2KGateWay/message/literalTypes", Order=0)]
        public System.Data.DataSet getMenuDataESSResult;
        
        public getMenuDataESSResponse() {
        }
        
        public getMenuDataESSResponse(System.Data.DataSet getMenuDataESSResult) {
            this.getMenuDataESSResult = getMenuDataESSResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="callPlusPollingToGetData", WrapperNamespace="http://tempuri.org/EF2KGateWay/message/literalTypes", IsWrapped=true)]
    public partial class callPlusPollingToGetDataRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/EF2KGateWay/message/literalTypes", Order=0)]
        public string pXml;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/EF2KGateWay/message/literalTypes", Order=1)]
        public string pActionNum;
        
        public callPlusPollingToGetDataRequest() {
        }
        
        public callPlusPollingToGetDataRequest(string pXml, string pActionNum) {
            this.pXml = pXml;
            this.pActionNum = pActionNum;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="callPlusPollingToGetDataResponse", WrapperNamespace="http://tempuri.org/EF2KGateWay/message/literalTypes", IsWrapped=true)]
    public partial class callPlusPollingToGetDataResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/EF2KGateWay/message/literalTypes", Order=0)]
        public System.Data.DataSet callPlusPollingToGetDataResult;
        
        public callPlusPollingToGetDataResponse() {
        }
        
        public callPlusPollingToGetDataResponse(System.Data.DataSet callPlusPollingToGetDataResult) {
            this.callPlusPollingToGetDataResult = callPlusPollingToGetDataResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface EFNETServiceSoapChannel : bxmc.sr_oa.EFNETServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EFNETServiceSoapClient : System.ServiceModel.ClientBase<bxmc.sr_oa.EFNETServiceSoap>, bxmc.sr_oa.EFNETServiceSoap {
        
        public EFNETServiceSoapClient() {
        }
        
        public EFNETServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EFNETServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EFNETServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EFNETServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void ReGetPDF(string pFormId, string pSheetNo) {
            base.Channel.ReGetPDF(pFormId, pSheetNo);
        }
        
        public System.Threading.Tasks.Task ReGetPDFAsync(string pFormId, string pSheetNo) {
            return base.Channel.ReGetPDFAsync(pFormId, pSheetNo);
        }
        
        public string zToolsTest_01_GetEZFlowPath() {
            return base.Channel.zToolsTest_01_GetEZFlowPath();
        }
        
        public System.Threading.Tasks.Task<string> zToolsTest_01_GetEZFlowPathAsync() {
            return base.Channel.zToolsTest_01_GetEZFlowPathAsync();
        }
        
        public string zToolsTest_02_GetSQLConnenction() {
            return base.Channel.zToolsTest_02_GetSQLConnenction();
        }
        
        public System.Threading.Tasks.Task<string> zToolsTest_02_GetSQLConnenctionAsync() {
            return base.Channel.zToolsTest_02_GetSQLConnenctionAsync();
        }
        
        public string zToolsTest_03_CheckXMLFile(string strEFSiteName) {
            return base.Channel.zToolsTest_03_CheckXMLFile(strEFSiteName);
        }
        
        public System.Threading.Tasks.Task<string> zToolsTest_03_CheckXMLFileAsync(string strEFSiteName) {
            return base.Channel.zToolsTest_03_CheckXMLFileAsync(strEFSiteName);
        }
        
        public string zToolsTest_04_ConnectToWFERP(string strERPServerIP, string strComfirmObject) {
            return base.Channel.zToolsTest_04_ConnectToWFERP(strERPServerIP, strComfirmObject);
        }
        
        public System.Threading.Tasks.Task<string> zToolsTest_04_ConnectToWFERPAsync(string strERPServerIP, string strComfirmObject) {
            return base.Channel.zToolsTest_04_ConnectToWFERPAsync(strERPServerIP, strComfirmObject);
        }
        
        public string zToolsTest_05_ConnectToEF() {
            return base.Channel.zToolsTest_05_ConnectToEF();
        }
        
        public System.Threading.Tasks.Task<string> zToolsTest_05_ConnectToEFAsync() {
            return base.Channel.zToolsTest_05_ConnectToEFAsync();
        }
        
        public string zToolsTest_06_CreateDataSet() {
            return base.Channel.zToolsTest_06_CreateDataSet();
        }
        
        public System.Threading.Tasks.Task<string> zToolsTest_06_CreateDataSetAsync() {
            return base.Channel.zToolsTest_06_CreateDataSetAsync();
        }
        
        public string zToolsTest_07_FindEmplName(string strEmpID) {
            return base.Channel.zToolsTest_07_FindEmplName(strEmpID);
        }
        
        public System.Threading.Tasks.Task<string> zToolsTest_07_FindEmplNameAsync(string strEmpID) {
            return base.Channel.zToolsTest_07_FindEmplNameAsync(strEmpID);
        }
        
        public string zToolsTest_08_GetEFFormID() {
            return base.Channel.zToolsTest_08_GetEFFormID();
        }
        
        public System.Threading.Tasks.Task<string> zToolsTest_08_GetEFFormIDAsync() {
            return base.Channel.zToolsTest_08_GetEFFormIDAsync();
        }
        
        public string zToolsTest_09_GetERPFormKey(string strERPFormID, string strEFSiteName) {
            return base.Channel.zToolsTest_09_GetERPFormKey(strERPFormID, strEFSiteName);
        }
        
        public System.Threading.Tasks.Task<string> zToolsTest_09_GetERPFormKeyAsync(string strERPFormID, string strEFSiteName) {
            return base.Channel.zToolsTest_09_GetERPFormKeyAsync(strERPFormID, strEFSiteName);
        }
        
        public string zToolsTest_10_GetMultiLanguage(string strLangID, string intAction) {
            return base.Channel.zToolsTest_10_GetMultiLanguage(strLangID, intAction);
        }
        
        public System.Threading.Tasks.Task<string> zToolsTest_10_GetMultiLanguageAsync(string strLangID, string intAction) {
            return base.Channel.zToolsTest_10_GetMultiLanguageAsync(strLangID, intAction);
        }
        
        public string zToolsTest_11_GetMailSetting(string strSiteName) {
            return base.Channel.zToolsTest_11_GetMailSetting(strSiteName);
        }
        
        public System.Threading.Tasks.Task<string> zToolsTest_11_GetMailSettingAsync(string strSiteName) {
            return base.Channel.zToolsTest_11_GetMailSettingAsync(strSiteName);
        }
        
        public string zToolsTest_12_WFERPProgIDIsExits(string strSiteName, string strERP) {
            return base.Channel.zToolsTest_12_WFERPProgIDIsExits(strSiteName, strERP);
        }
        
        public System.Threading.Tasks.Task<string> zToolsTest_12_WFERPProgIDIsExitsAsync(string strSiteName, string strERP) {
            return base.Channel.zToolsTest_12_WFERPProgIDIsExitsAsync(strSiteName, strERP);
        }
        
        public string zToolsTest_13_SoapExceptionTest(int i, int j) {
            return base.Channel.zToolsTest_13_SoapExceptionTest(i, j);
        }
        
        public System.Threading.Tasks.Task<string> zToolsTest_13_SoapExceptionTestAsync(int i, int j) {
            return base.Channel.zToolsTest_13_SoapExceptionTestAsync(i, j);
        }
        
        public string E10GetApproveLog(string tFormID, string tSheetNo, string strXMLInput) {
            return base.Channel.E10GetApproveLog(tFormID, tSheetNo, strXMLInput);
        }
        
        public System.Threading.Tasks.Task<string> E10GetApproveLogAsync(string tFormID, string tSheetNo, string strXMLInput) {
            return base.Channel.E10GetApproveLogAsync(tFormID, tSheetNo, strXMLInput);
        }
        
        public string getcondValue(string strOrgGuid, string strProgramID, string strSourceFormID, string strSiteName, string XMLDoc, string strPath) {
            return base.Channel.getcondValue(strOrgGuid, strProgramID, strSourceFormID, strSiteName, XMLDoc, strPath);
        }
        
        public System.Threading.Tasks.Task<string> getcondValueAsync(string strOrgGuid, string strProgramID, string strSourceFormID, string strSiteName, string XMLDoc, string strPath) {
            return base.Channel.getcondValueAsync(strOrgGuid, strProgramID, strSourceFormID, strSiteName, XMLDoc, strPath);
        }
        
        public string GetMenuData(string xml) {
            return base.Channel.GetMenuData(xml);
        }
        
        public System.Threading.Tasks.Task<string> GetMenuDataAsync(string xml) {
            return base.Channel.GetMenuDataAsync(xml);
        }
        
        public string GetUserToken(string pXmlIn) {
            return base.Channel.GetUserToken(pXmlIn);
        }
        
        public System.Threading.Tasks.Task<string> GetUserTokenAsync(string pXmlIn) {
            return base.Channel.GetUserTokenAsync(pXmlIn);
        }
        
        public string CheckUserAuth(string pXmlIn) {
            return base.Channel.CheckUserAuth(pXmlIn);
        }
        
        public System.Threading.Tasks.Task<string> CheckUserAuthAsync(string pXmlIn) {
            return base.Channel.CheckUserAuthAsync(pXmlIn);
        }
        
        public string GetOrganizationList(string pXmlIn) {
            return base.Channel.GetOrganizationList(pXmlIn);
        }
        
        public System.Threading.Tasks.Task<string> GetOrganizationListAsync(string pXmlIn) {
            return base.Channel.GetOrganizationListAsync(pXmlIn);
        }
        
        public string DoEasyFlowLogOut(string userId, string srcIP) {
            return base.Channel.DoEasyFlowLogOut(userId, srcIP);
        }
        
        public System.Threading.Tasks.Task<string> DoEasyFlowLogOutAsync(string userId, string srcIP) {
            return base.Channel.DoEasyFlowLogOutAsync(userId, srcIP);
        }
        
        public string GetTodoListTotalSize(string xmlRequest) {
            return base.Channel.GetTodoListTotalSize(xmlRequest);
        }
        
        public System.Threading.Tasks.Task<string> GetTodoListTotalSizeAsync(string xmlRequest) {
            return base.Channel.GetTodoListTotalSizeAsync(xmlRequest);
        }
        
        public string GetTodoList(string xmlRequest) {
            return base.Channel.GetTodoList(xmlRequest);
        }
        
        public System.Threading.Tasks.Task<string> GetTodoListAsync(string xmlRequest) {
            return base.Channel.GetTodoListAsync(xmlRequest);
        }
        
        public string SyncAccountData(string pXmlIn) {
            return base.Channel.SyncAccountData(pXmlIn);
        }
        
        public System.Threading.Tasks.Task<string> SyncAccountDataAsync(string pXmlIn) {
            return base.Channel.SyncAccountDataAsync(pXmlIn);
        }
        
        public string GetNoticeApproveStatus(string pXml) {
            return base.Channel.GetNoticeApproveStatus(pXml);
        }
        
        public System.Threading.Tasks.Task<string> GetNoticeApproveStatusAsync(string pXml) {
            return base.Channel.GetNoticeApproveStatusAsync(pXml);
        }
        
        public string RemoteMethod(string varPara) {
            return base.Channel.RemoteMethod(varPara);
        }
        
        public System.Threading.Tasks.Task<string> RemoteMethodAsync(string varPara) {
            return base.Channel.RemoteMethodAsync(varPara);
        }
        
        public string[] RemoteCreateForm(string varPara) {
            return base.Channel.RemoteCreateForm(varPara);
        }
        
        public System.Threading.Tasks.Task<string[]> RemoteCreateFormAsync(string varPara) {
            return base.Channel.RemoteCreateFormAsync(varPara);
        }
        
        public string GetMCloudEasyFlowService(string strXMLInput) {
            return base.Channel.GetMCloudEasyFlowService(strXMLInput);
        }
        
        public System.Threading.Tasks.Task<string> GetMCloudEasyFlowServiceAsync(string strXMLInput) {
            return base.Channel.GetMCloudEasyFlowServiceAsync(strXMLInput);
        }
        
        public bool CheckLoginPsw(string pUid, string pPwd) {
            return base.Channel.CheckLoginPsw(pUid, pPwd);
        }
        
        public System.Threading.Tasks.Task<bool> CheckLoginPswAsync(string pUid, string pPwd) {
            return base.Channel.CheckLoginPswAsync(pUid, pPwd);
        }
        
        public string findAllEmpByBossID(string pUid) {
            return base.Channel.findAllEmpByBossID(pUid);
        }
        
        public System.Threading.Tasks.Task<string> findAllEmpByBossIDAsync(string pUid) {
            return base.Channel.findAllEmpByBossIDAsync(pUid);
        }
        
        public string findNameByEmpID(string pUid) {
            return base.Channel.findNameByEmpID(pUid);
        }
        
        public System.Threading.Tasks.Task<string> findNameByEmpIDAsync(string pUid) {
            return base.Channel.findNameByEmpIDAsync(pUid);
        }
        
        public string findEFFormIdByEMSId(string pUid, string pEMSId) {
            return base.Channel.findEFFormIdByEMSId(pUid, pEMSId);
        }
        
        public System.Threading.Tasks.Task<string> findEFFormIdByEMSIdAsync(string pUid, string pEMSId) {
            return base.Channel.findEFFormIdByEMSIdAsync(pUid, pEMSId);
        }
        
        public string insertemsmb(string pUid, string pkey1, string pkey2, string pkey3) {
            return base.Channel.insertemsmb(pUid, pkey1, pkey2, pkey3);
        }
        
        public System.Threading.Tasks.Task<string> insertemsmbAsync(string pUid, string pkey1, string pkey2, string pkey3) {
            return base.Channel.insertemsmbAsync(pUid, pkey1, pkey2, pkey3);
        }
        
        public string getFormStateAndResult(string pUid, string pSheetNo, string pLang) {
            return base.Channel.getFormStateAndResult(pUid, pSheetNo, pLang);
        }
        
        public System.Threading.Tasks.Task<string> getFormStateAndResultAsync(string pUid, string pSheetNo, string pLang) {
            return base.Channel.getFormStateAndResultAsync(pUid, pSheetNo, pLang);
        }
        
        public string sendMail(string pUid, string pAryUid, string pSubject, string pBody) {
            return base.Channel.sendMail(pUid, pAryUid, pSubject, pBody);
        }
        
        public System.Threading.Tasks.Task<string> sendMailAsync(string pUid, string pAryUid, string pSubject, string pBody) {
            return base.Channel.sendMailAsync(pUid, pAryUid, pSubject, pBody);
        }
        
        public string findAllLeftEmpID(string pUid) {
            return base.Channel.findAllLeftEmpID(pUid);
        }
        
        public System.Threading.Tasks.Task<string> findAllLeftEmpIDAsync(string pUid) {
            return base.Channel.findAllLeftEmpIDAsync(pUid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bxmc.sr_oa.findFormSupervisorToEmpIDResponse bxmc.sr_oa.EFNETServiceSoap.findFormSupervisorToEmpID(bxmc.sr_oa.findFormSupervisorToEmpIDRequest request) {
            return base.Channel.findFormSupervisorToEmpID(request);
        }
        
        public System.Data.DataSet findFormSupervisorToEmpID(string pUid) {
            bxmc.sr_oa.findFormSupervisorToEmpIDRequest inValue = new bxmc.sr_oa.findFormSupervisorToEmpIDRequest();
            inValue.pUid = pUid;
            bxmc.sr_oa.findFormSupervisorToEmpIDResponse retVal = ((bxmc.sr_oa.EFNETServiceSoap)(this)).findFormSupervisorToEmpID(inValue);
            return retVal.findFormSupervisorToEmpIDResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<bxmc.sr_oa.findFormSupervisorToEmpIDResponse> bxmc.sr_oa.EFNETServiceSoap.findFormSupervisorToEmpIDAsync(bxmc.sr_oa.findFormSupervisorToEmpIDRequest request) {
            return base.Channel.findFormSupervisorToEmpIDAsync(request);
        }
        
        public System.Threading.Tasks.Task<bxmc.sr_oa.findFormSupervisorToEmpIDResponse> findFormSupervisorToEmpIDAsync(string pUid) {
            bxmc.sr_oa.findFormSupervisorToEmpIDRequest inValue = new bxmc.sr_oa.findFormSupervisorToEmpIDRequest();
            inValue.pUid = pUid;
            return ((bxmc.sr_oa.EFNETServiceSoap)(this)).findFormSupervisorToEmpIDAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bxmc.sr_oa.findAppFormToEFgetContentResponse bxmc.sr_oa.EFNETServiceSoap.findAppFormToEFgetContent(bxmc.sr_oa.findAppFormToEFgetContentRequest request) {
            return base.Channel.findAppFormToEFgetContent(request);
        }
        
        public string findAppFormToEFgetContent(string pUid, string pFormID, string pSheetNo) {
            bxmc.sr_oa.findAppFormToEFgetContentRequest inValue = new bxmc.sr_oa.findAppFormToEFgetContentRequest();
            inValue.pUid = pUid;
            inValue.pFormID = pFormID;
            inValue.pSheetNo = pSheetNo;
            bxmc.sr_oa.findAppFormToEFgetContentResponse retVal = ((bxmc.sr_oa.EFNETServiceSoap)(this)).findAppFormToEFgetContent(inValue);
            return retVal.findAppFormToEFgetContentResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<bxmc.sr_oa.findAppFormToEFgetContentResponse> bxmc.sr_oa.EFNETServiceSoap.findAppFormToEFgetContentAsync(bxmc.sr_oa.findAppFormToEFgetContentRequest request) {
            return base.Channel.findAppFormToEFgetContentAsync(request);
        }
        
        public System.Threading.Tasks.Task<bxmc.sr_oa.findAppFormToEFgetContentResponse> findAppFormToEFgetContentAsync(string pUid, string pFormID, string pSheetNo) {
            bxmc.sr_oa.findAppFormToEFgetContentRequest inValue = new bxmc.sr_oa.findAppFormToEFgetContentRequest();
            inValue.pUid = pUid;
            inValue.pFormID = pFormID;
            inValue.pSheetNo = pSheetNo;
            return ((bxmc.sr_oa.EFNETServiceSoap)(this)).findAppFormToEFgetContentAsync(inValue);
        }
        
        public string insertemsma(string pUid, string pkey1, string pkey2) {
            return base.Channel.insertemsma(pUid, pkey1, pkey2);
        }
        
        public System.Threading.Tasks.Task<string> insertemsmaAsync(string pUid, string pkey1, string pkey2) {
            return base.Channel.insertemsmaAsync(pUid, pkey1, pkey2);
        }
        
        public string deleteemsma(string pUid, string pkey1, string pkey2) {
            return base.Channel.deleteemsma(pUid, pkey1, pkey2);
        }
        
        public System.Threading.Tasks.Task<string> deleteemsmaAsync(string pUid, string pkey1, string pkey2) {
            return base.Channel.deleteemsmaAsync(pUid, pkey1, pkey2);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bxmc.sr_oa.GetMIMJDataSetResponse bxmc.sr_oa.EFNETServiceSoap.GetMIMJDataSet(bxmc.sr_oa.GetMIMJDataSetRequest request) {
            return base.Channel.GetMIMJDataSet(request);
        }
        
        public System.Data.DataSet GetMIMJDataSet(string pXml) {
            bxmc.sr_oa.GetMIMJDataSetRequest inValue = new bxmc.sr_oa.GetMIMJDataSetRequest();
            inValue.pXml = pXml;
            bxmc.sr_oa.GetMIMJDataSetResponse retVal = ((bxmc.sr_oa.EFNETServiceSoap)(this)).GetMIMJDataSet(inValue);
            return retVal.GetMIMJDataSetResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<bxmc.sr_oa.GetMIMJDataSetResponse> bxmc.sr_oa.EFNETServiceSoap.GetMIMJDataSetAsync(bxmc.sr_oa.GetMIMJDataSetRequest request) {
            return base.Channel.GetMIMJDataSetAsync(request);
        }
        
        public System.Threading.Tasks.Task<bxmc.sr_oa.GetMIMJDataSetResponse> GetMIMJDataSetAsync(string pXml) {
            bxmc.sr_oa.GetMIMJDataSetRequest inValue = new bxmc.sr_oa.GetMIMJDataSetRequest();
            inValue.pXml = pXml;
            return ((bxmc.sr_oa.EFNETServiceSoap)(this)).GetMIMJDataSetAsync(inValue);
        }
        
        public string callBackEFService(string pXml) {
            return base.Channel.callBackEFService(pXml);
        }
        
        public System.Threading.Tasks.Task<string> callBackEFServiceAsync(string pXml) {
            return base.Channel.callBackEFServiceAsync(pXml);
        }
        
        public string invokePLUSService(string pXml) {
            return base.Channel.invokePLUSService(pXml);
        }
        
        public System.Threading.Tasks.Task<string> invokePLUSServiceAsync(string pXml) {
            return base.Channel.invokePLUSServiceAsync(pXml);
        }
        
        public string invokeESSService(string pXml) {
            return base.Channel.invokeESSService(pXml);
        }
        
        public System.Threading.Tasks.Task<string> invokeESSServiceAsync(string pXml) {
            return base.Channel.invokeESSServiceAsync(pXml);
        }
        
        public string invokeDMSService(string pXml) {
            return base.Channel.invokeDMSService(pXml);
        }
        
        public System.Threading.Tasks.Task<string> invokeDMSServiceAsync(string pXml) {
            return base.Channel.invokeDMSServiceAsync(pXml);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bxmc.sr_oa.getMenuDataESSResponse bxmc.sr_oa.EFNETServiceSoap.getMenuDataESS(bxmc.sr_oa.getMenuDataESSRequest request) {
            return base.Channel.getMenuDataESS(request);
        }
        
        public System.Data.DataSet getMenuDataESS(string pXML) {
            bxmc.sr_oa.getMenuDataESSRequest inValue = new bxmc.sr_oa.getMenuDataESSRequest();
            inValue.pXML = pXML;
            bxmc.sr_oa.getMenuDataESSResponse retVal = ((bxmc.sr_oa.EFNETServiceSoap)(this)).getMenuDataESS(inValue);
            return retVal.getMenuDataESSResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<bxmc.sr_oa.getMenuDataESSResponse> bxmc.sr_oa.EFNETServiceSoap.getMenuDataESSAsync(bxmc.sr_oa.getMenuDataESSRequest request) {
            return base.Channel.getMenuDataESSAsync(request);
        }
        
        public System.Threading.Tasks.Task<bxmc.sr_oa.getMenuDataESSResponse> getMenuDataESSAsync(string pXML) {
            bxmc.sr_oa.getMenuDataESSRequest inValue = new bxmc.sr_oa.getMenuDataESSRequest();
            inValue.pXML = pXML;
            return ((bxmc.sr_oa.EFNETServiceSoap)(this)).getMenuDataESSAsync(inValue);
        }
        
        public bool setUserData(string pXml) {
            return base.Channel.setUserData(pXml);
        }
        
        public System.Threading.Tasks.Task<bool> setUserDataAsync(string pXml) {
            return base.Channel.setUserDataAsync(pXml);
        }
        
        public bool callPlusToSave(string pXml) {
            return base.Channel.callPlusToSave(pXml);
        }
        
        public System.Threading.Tasks.Task<bool> callPlusToSaveAsync(string pXml) {
            return base.Channel.callPlusToSaveAsync(pXml);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bxmc.sr_oa.callPlusPollingToGetDataResponse bxmc.sr_oa.EFNETServiceSoap.callPlusPollingToGetData(bxmc.sr_oa.callPlusPollingToGetDataRequest request) {
            return base.Channel.callPlusPollingToGetData(request);
        }
        
        public System.Data.DataSet callPlusPollingToGetData(string pXml, string pActionNum) {
            bxmc.sr_oa.callPlusPollingToGetDataRequest inValue = new bxmc.sr_oa.callPlusPollingToGetDataRequest();
            inValue.pXml = pXml;
            inValue.pActionNum = pActionNum;
            bxmc.sr_oa.callPlusPollingToGetDataResponse retVal = ((bxmc.sr_oa.EFNETServiceSoap)(this)).callPlusPollingToGetData(inValue);
            return retVal.callPlusPollingToGetDataResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<bxmc.sr_oa.callPlusPollingToGetDataResponse> bxmc.sr_oa.EFNETServiceSoap.callPlusPollingToGetDataAsync(bxmc.sr_oa.callPlusPollingToGetDataRequest request) {
            return base.Channel.callPlusPollingToGetDataAsync(request);
        }
        
        public System.Threading.Tasks.Task<bxmc.sr_oa.callPlusPollingToGetDataResponse> callPlusPollingToGetDataAsync(string pXml, string pActionNum) {
            bxmc.sr_oa.callPlusPollingToGetDataRequest inValue = new bxmc.sr_oa.callPlusPollingToGetDataRequest();
            inValue.pXml = pXml;
            inValue.pActionNum = pActionNum;
            return ((bxmc.sr_oa.EFNETServiceSoap)(this)).callPlusPollingToGetDataAsync(inValue);
        }
        
        public string callPlusCheckSaveStatus(string pXml, string pActionNum) {
            return base.Channel.callPlusCheckSaveStatus(pXml, pActionNum);
        }
        
        public System.Threading.Tasks.Task<string> callPlusCheckSaveStatusAsync(string pXml, string pActionNum) {
            return base.Channel.callPlusCheckSaveStatusAsync(pXml, pActionNum);
        }
        
        public string getColumnSet(string pXml, string pLang) {
            return base.Channel.getColumnSet(pXml, pLang);
        }
        
        public System.Threading.Tasks.Task<string> getColumnSetAsync(string pXml, string pLang) {
            return base.Channel.getColumnSetAsync(pXml, pLang);
        }
        
        public string HRMGateWay(string pXml) {
            return base.Channel.HRMGateWay(pXml);
        }
        
        public System.Threading.Tasks.Task<string> HRMGateWayAsync(string pXml) {
            return base.Channel.HRMGateWayAsync(pXml);
        }
        
        public string doAsyncToSetStatus(string pFormId, string pSheetNo, bool pUserWithDraw) {
            return base.Channel.doAsyncToSetStatus(pFormId, pSheetNo, pUserWithDraw);
        }
        
        public System.Threading.Tasks.Task<string> doAsyncToSetStatusAsync(string pFormId, string pSheetNo, bool pUserWithDraw) {
            return base.Channel.doAsyncToSetStatusAsync(pFormId, pSheetNo, pUserWithDraw);
        }
        
        public object[] doSyncToSetStatus(string pFormId, string pSheetNo, bool pUserWithDraw) {
            return base.Channel.doSyncToSetStatus(pFormId, pSheetNo, pUserWithDraw);
        }
        
        public System.Threading.Tasks.Task<object[]> doSyncToSetStatusAsync(string pFormId, string pSheetNo, bool pUserWithDraw) {
            return base.Channel.doSyncToSetStatusAsync(pFormId, pSheetNo, pUserWithDraw);
        }
        
        public void doScheduleMail(string pAgentPath, string pArguments) {
            base.Channel.doScheduleMail(pAgentPath, pArguments);
        }
        
        public System.Threading.Tasks.Task doScheduleMailAsync(string pAgentPath, string pArguments) {
            return base.Channel.doScheduleMailAsync(pAgentPath, pArguments);
        }
        
        public string doAsyncCreateYEIEInfo(string pFormId, string pSheetNo, string pSerialNo, string pScheduleMailSID) {
            return base.Channel.doAsyncCreateYEIEInfo(pFormId, pSheetNo, pSerialNo, pScheduleMailSID);
        }
        
        public System.Threading.Tasks.Task<string> doAsyncCreateYEIEInfoAsync(string pFormId, string pSheetNo, string pSerialNo, string pScheduleMailSID) {
            return base.Channel.doAsyncCreateYEIEInfoAsync(pFormId, pSheetNo, pSerialNo, pScheduleMailSID);
        }
        
        public object[] doSyncCreateYEIEInfo(string pFormId, string pSheetNo, string pSerialNo, string pScheduleMailSID) {
            return base.Channel.doSyncCreateYEIEInfo(pFormId, pSheetNo, pSerialNo, pScheduleMailSID);
        }
        
        public System.Threading.Tasks.Task<object[]> doSyncCreateYEIEInfoAsync(string pFormId, string pSheetNo, string pSerialNo, string pScheduleMailSID) {
            return base.Channel.doSyncCreateYEIEInfoAsync(pFormId, pSheetNo, pSerialNo, pScheduleMailSID);
        }
        
        public void doAsyncGroupApprove(string pGUID, string pLang) {
            base.Channel.doAsyncGroupApprove(pGUID, pLang);
        }
        
        public System.Threading.Tasks.Task doAsyncGroupApproveAsync(string pGUID, string pLang) {
            return base.Channel.doAsyncGroupApproveAsync(pGUID, pLang);
        }
        
        public void doAsyncToolsRemoteCreateForm(string pXML, string pBackupERPTable, string pERPComplexPK) {
            base.Channel.doAsyncToolsRemoteCreateForm(pXML, pBackupERPTable, pERPComplexPK);
        }
        
        public System.Threading.Tasks.Task doAsyncToolsRemoteCreateFormAsync(string pXML, string pBackupERPTable, string pERPComplexPK) {
            return base.Channel.doAsyncToolsRemoteCreateFormAsync(pXML, pBackupERPTable, pERPComplexPK);
        }
        
        public void doSyncToolsRemoteCreateForm(string pXML, string pBackupERPTable, string pERPComplexPK) {
            base.Channel.doSyncToolsRemoteCreateForm(pXML, pBackupERPTable, pERPComplexPK);
        }
        
        public System.Threading.Tasks.Task doSyncToolsRemoteCreateFormAsync(string pXML, string pBackupERPTable, string pERPComplexPK) {
            return base.Channel.doSyncToolsRemoteCreateFormAsync(pXML, pBackupERPTable, pERPComplexPK);
        }
        
        public long getMaxRequestLength() {
            return base.Channel.getMaxRequestLength();
        }
        
        public System.Threading.Tasks.Task<long> getMaxRequestLengthAsync() {
            return base.Channel.getMaxRequestLengthAsync();
        }
        
        public string GetEFNETLoginID(string strUserID, string tLang) {
            return base.Channel.GetEFNETLoginID(strUserID, tLang);
        }
        
        public System.Threading.Tasks.Task<string> GetEFNETLoginIDAsync(string strUserID, string tLang) {
            return base.Channel.GetEFNETLoginIDAsync(strUserID, tLang);
        }
        
        public string CheckDoEasyCallBack(string pXML) {
            return base.Channel.CheckDoEasyCallBack(pXML);
        }
        
        public System.Threading.Tasks.Task<string> CheckDoEasyCallBackAsync(string pXML) {
            return base.Channel.CheckDoEasyCallBackAsync(pXML);
        }
        
        public string DoEasyCallBack(string pXML) {
            return base.Channel.DoEasyCallBack(pXML);
        }
        
        public System.Threading.Tasks.Task<string> DoEasyCallBackAsync(string pXML) {
            return base.Channel.DoEasyCallBackAsync(pXML);
        }
        
        public string getAllUser(string strXMLInput) {
            return base.Channel.getAllUser(strXMLInput);
        }
        
        public System.Threading.Tasks.Task<string> getAllUserAsync(string strXMLInput) {
            return base.Channel.getAllUserAsync(strXMLInput);
        }
        
        public string sendBepMessages(string strXMLInput) {
            return base.Channel.sendBepMessages(strXMLInput);
        }
        
        public System.Threading.Tasks.Task<string> sendBepMessagesAsync(string strXMLInput) {
            return base.Channel.sendBepMessagesAsync(strXMLInput);
        }
        
        public string doAsyncToE10Create(string pFormId, string pSheetNo, string pXML) {
            return base.Channel.doAsyncToE10Create(pFormId, pSheetNo, pXML);
        }
        
        public System.Threading.Tasks.Task<string> doAsyncToE10CreateAsync(string pFormId, string pSheetNo, string pXML) {
            return base.Channel.doAsyncToE10CreateAsync(pFormId, pSheetNo, pXML);
        }
        
        public void ReSetSYSBA() {
            base.Channel.ReSetSYSBA();
        }
        
        public System.Threading.Tasks.Task ReSetSYSBAAsync() {
            return base.Channel.ReSetSYSBAAsync();
        }
        
        public object[] doE10SetStatus(string pXML) {
            return base.Channel.doE10SetStatus(pXML);
        }
        
        public System.Threading.Tasks.Task<object[]> doE10SetStatusAsync(string pXML) {
            return base.Channel.doE10SetStatusAsync(pXML);
        }
        
        public string invokeSrv(string pPara) {
            return base.Channel.invokeSrv(pPara);
        }
        
        public System.Threading.Tasks.Task<string> invokeSrvAsync(string pPara) {
            return base.Channel.invokeSrvAsync(pPara);
        }
        
        public string callbackSrv(string pPara) {
            return base.Channel.callbackSrv(pPara);
        }
        
        public System.Threading.Tasks.Task<string> callbackSrvAsync(string pPara) {
            return base.Channel.callbackSrvAsync(pPara);
        }
        
        public string syncProd(string pPara) {
            return base.Channel.syncProd(pPara);
        }
        
        public System.Threading.Tasks.Task<string> syncProdAsync(string pPara) {
            return base.Channel.syncProdAsync(pPara);
        }
        
        public string ERP_GetEFFormID(string varPara) {
            return base.Channel.ERP_GetEFFormID(varPara);
        }
        
        public System.Threading.Tasks.Task<string> ERP_GetEFFormIDAsync(string varPara) {
            return base.Channel.ERP_GetEFFormIDAsync(varPara);
        }
        
        public string ERP_GetFormCondField(string varPara) {
            return base.Channel.ERP_GetFormCondField(varPara);
        }
        
        public System.Threading.Tasks.Task<string> ERP_GetFormCondFieldAsync(string varPara) {
            return base.Channel.ERP_GetFormCondFieldAsync(varPara);
        }
        
        public string ERP_GET_APPROVE_RECORD(string varParaOfXMLFormat) {
            return base.Channel.ERP_GET_APPROVE_RECORD(varParaOfXMLFormat);
        }
        
        public System.Threading.Tasks.Task<string> ERP_GET_APPROVE_RECORDAsync(string varParaOfXMLFormat) {
            return base.Channel.ERP_GET_APPROVE_RECORDAsync(varParaOfXMLFormat);
        }
        
        public string ERP_GET_APPROVE_RECORD_ARRAY(string varParaOfXMLFormat) {
            return base.Channel.ERP_GET_APPROVE_RECORD_ARRAY(varParaOfXMLFormat);
        }
        
        public System.Threading.Tasks.Task<string> ERP_GET_APPROVE_RECORD_ARRAYAsync(string varParaOfXMLFormat) {
            return base.Channel.ERP_GET_APPROVE_RECORD_ARRAYAsync(varParaOfXMLFormat);
        }
        
        public string ERP_CreateEFForm(string varParaOfXMLFormat, string strMark, string strAtt) {
            return base.Channel.ERP_CreateEFForm(varParaOfXMLFormat, strMark, strAtt);
        }
        
        public System.Threading.Tasks.Task<string> ERP_CreateEFFormAsync(string varParaOfXMLFormat, string strMark, string strAtt) {
            return base.Channel.ERP_CreateEFFormAsync(varParaOfXMLFormat, strMark, strAtt);
        }
        
        public object ERP_DeSerializationByte(string tSerial) {
            return base.Channel.ERP_DeSerializationByte(tSerial);
        }
        
        public System.Threading.Tasks.Task<object> ERP_DeSerializationByteAsync(string tSerial) {
            return base.Channel.ERP_DeSerializationByteAsync(tSerial);
        }
        
        public string ERP_SerializationByte(byte[] arySerial) {
            return base.Channel.ERP_SerializationByte(arySerial);
        }
        
        public System.Threading.Tasks.Task<string> ERP_SerializationByteAsync(byte[] arySerial) {
            return base.Channel.ERP_SerializationByteAsync(arySerial);
        }
        
        public string ERP_SerializationString(string strSerial) {
            return base.Channel.ERP_SerializationString(strSerial);
        }
        
        public System.Threading.Tasks.Task<string> ERP_SerializationStringAsync(string strSerial) {
            return base.Channel.ERP_SerializationStringAsync(strSerial);
        }
        
        public string ERP_GetApproveStatus(string varParaOfXMLFormat) {
            return base.Channel.ERP_GetApproveStatus(varParaOfXMLFormat);
        }
        
        public System.Threading.Tasks.Task<string> ERP_GetApproveStatusAsync(string varParaOfXMLFormat) {
            return base.Channel.ERP_GetApproveStatusAsync(varParaOfXMLFormat);
        }
        
        public string ERP_IsEFConnected(string varPara) {
            return base.Channel.ERP_IsEFConnected(varPara);
        }
        
        public System.Threading.Tasks.Task<string> ERP_IsEFConnectedAsync(string varPara) {
            return base.Channel.ERP_IsEFConnectedAsync(varPara);
        }
        
        public string GetIntegrateProtocol() {
            return base.Channel.GetIntegrateProtocol();
        }
        
        public System.Threading.Tasks.Task<string> GetIntegrateProtocolAsync() {
            return base.Channel.GetIntegrateProtocolAsync();
        }
        
        public string GetApproveOpinion(string varPara) {
            return base.Channel.GetApproveOpinion(varPara);
        }
        
        public System.Threading.Tasks.Task<string> GetApproveOpinionAsync(string varPara) {
            return base.Channel.GetApproveOpinionAsync(varPara);
        }
        
        public string GetFormFlow(string varPara) {
            return base.Channel.GetFormFlow(varPara);
        }
        
        public System.Threading.Tasks.Task<string> GetFormFlowAsync(string varPara) {
            return base.Channel.GetFormFlowAsync(varPara);
        }
        
        public string getERPFormXML(string strSiteName) {
            return base.Channel.getERPFormXML(strSiteName);
        }
        
        public System.Threading.Tasks.Task<string> getERPFormXMLAsync(string strSiteName) {
            return base.Channel.getERPFormXMLAsync(strSiteName);
        }
        
        public string getERPFormList(string strSiteName) {
            return base.Channel.getERPFormList(strSiteName);
        }
        
        public System.Threading.Tasks.Task<string> getERPFormListAsync(string strSiteName) {
            return base.Channel.getERPFormListAsync(strSiteName);
        }
        
        public bool checkERPFormName(string strInputNmae, string strSiteName) {
            return base.Channel.checkERPFormName(strInputNmae, strSiteName);
        }
        
        public System.Threading.Tasks.Task<bool> checkERPFormNameAsync(string strInputNmae, string strSiteName) {
            return base.Channel.checkERPFormNameAsync(strInputNmae, strSiteName);
        }
        
        public int getERPFormKey(string strInputName, string strSiteName) {
            return base.Channel.getERPFormKey(strInputName, strSiteName);
        }
        
        public System.Threading.Tasks.Task<int> getERPFormKeyAsync(string strInputName, string strSiteName) {
            return base.Channel.getERPFormKeyAsync(strInputName, strSiteName);
        }
        
        public int getVersion(string strSiteName) {
            return base.Channel.getVersion(strSiteName);
        }
        
        public System.Threading.Tasks.Task<int> getVersionAsync(string strSiteName) {
            return base.Channel.getVersionAsync(strSiteName);
        }
        
        public string getERPServerIPByForm(string strInputSet) {
            return base.Channel.getERPServerIPByForm(strInputSet);
        }
        
        public System.Threading.Tasks.Task<string> getERPServerIPByFormAsync(string strInputSet) {
            return base.Channel.getERPServerIPByFormAsync(strInputSet);
        }
        
        public string delTempRecord(string strSerialNumber, string strSiteName) {
            return base.Channel.delTempRecord(strSerialNumber, strSiteName);
        }
        
        public System.Threading.Tasks.Task<string> delTempRecordAsync(string strSerialNumber, string strSiteName) {
            return base.Channel.delTempRecordAsync(strSerialNumber, strSiteName);
        }
        
        public string saveERPInfoToTemp(string htString, string strSiteName) {
            return base.Channel.saveERPInfoToTemp(htString, strSiteName);
        }
        
        public System.Threading.Tasks.Task<string> saveERPInfoToTempAsync(string htString, string strSiteName) {
            return base.Channel.saveERPInfoToTempAsync(htString, strSiteName);
        }
        
        public string getFormID(string strSiteName, string strProgID) {
            return base.Channel.getFormID(strSiteName, strProgID);
        }
        
        public System.Threading.Tasks.Task<string> getFormIDAsync(string strSiteName, string strProgID) {
            return base.Channel.getFormIDAsync(strSiteName, strProgID);
        }
        
        public string getAppPath() {
            return base.Channel.getAppPath();
        }
        
        public System.Threading.Tasks.Task<string> getAppPathAsync() {
            return base.Channel.getAppPathAsync();
        }
        
        public string getProgID(string strSiteName, string strFormID) {
            return base.Channel.getProgID(strSiteName, strFormID);
        }
        
        public System.Threading.Tasks.Task<string> getProgIDAsync(string strSiteName, string strFormID) {
            return base.Channel.getProgIDAsync(strSiteName, strFormID);
        }
        
        public string getERPServerIP(string strSiteName, string strFormID, string strProgID) {
            return base.Channel.getERPServerIP(strSiteName, strFormID, strProgID);
        }
        
        public System.Threading.Tasks.Task<string> getERPServerIPAsync(string strSiteName, string strFormID, string strProgID) {
            return base.Channel.getERPServerIPAsync(strSiteName, strFormID, strProgID);
        }
        
        public object[] ChkERP_BeforeApprove(string dicInputSet) {
            return base.Channel.ChkERP_BeforeApprove(dicInputSet);
        }
        
        public System.Threading.Tasks.Task<object[]> ChkERP_BeforeApproveAsync(string dicInputSet) {
            return base.Channel.ChkERP_BeforeApproveAsync(dicInputSet);
        }
        
        public object[] ChkERP_BeforeApprove2(string dicInputSet, string pFormId, string pSheetNo) {
            return base.Channel.ChkERP_BeforeApprove2(dicInputSet, pFormId, pSheetNo);
        }
        
        public System.Threading.Tasks.Task<object[]> ChkERP_BeforeApprove2Async(string dicInputSet, string pFormId, string pSheetNo) {
            return base.Channel.ChkERP_BeforeApprove2Async(dicInputSet, pFormId, pSheetNo);
        }
        
        public object[] SetERP_AfterApprove(string dicInputSet) {
            return base.Channel.SetERP_AfterApprove(dicInputSet);
        }
        
        public System.Threading.Tasks.Task<object[]> SetERP_AfterApproveAsync(string dicInputSet) {
            return base.Channel.SetERP_AfterApproveAsync(dicInputSet);
        }
        
        public object[] SetERP_AfterApprove2(string dicInputSet, string pFormId, string pSheetNo) {
            return base.Channel.SetERP_AfterApprove2(dicInputSet, pFormId, pSheetNo);
        }
        
        public System.Threading.Tasks.Task<object[]> SetERP_AfterApprove2Async(string dicInputSet, string pFormId, string pSheetNo) {
            return base.Channel.SetERP_AfterApprove2Async(dicInputSet, pFormId, pSheetNo);
        }
        
        public object[] SaveFormInfoToERP(string dicInputSet) {
            return base.Channel.SaveFormInfoToERP(dicInputSet);
        }
        
        public System.Threading.Tasks.Task<object[]> SaveFormInfoToERPAsync(string dicInputSet) {
            return base.Channel.SaveFormInfoToERPAsync(dicInputSet);
        }
        
        public int GenerateERPic(string dicInputSet, string pWhereClause) {
            return base.Channel.GenerateERPic(dicInputSet, pWhereClause);
        }
        
        public System.Threading.Tasks.Task<int> GenerateERPicAsync(string dicInputSet, string pWhereClause) {
            return base.Channel.GenerateERPicAsync(dicInputSet, pWhereClause);
        }
        
        public object[] ConnectToERP(int lngERPVersion, string strERPServerIP, string strComfirmObject) {
            return base.Channel.ConnectToERP(lngERPVersion, strERPServerIP, strComfirmObject);
        }
        
        public System.Threading.Tasks.Task<object[]> ConnectToERPAsync(int lngERPVersion, string strERPServerIP, string strComfirmObject) {
            return base.Channel.ConnectToERPAsync(lngERPVersion, strERPServerIP, strComfirmObject);
        }
        
        public int GenerateSpecialPic(string dicInputSet) {
            return base.Channel.GenerateSpecialPic(dicInputSet);
        }
        
        public System.Threading.Tasks.Task<int> GenerateSpecialPicAsync(string dicInputSet) {
            return base.Channel.GenerateSpecialPicAsync(dicInputSet);
        }
        
        public string GetFormInfo(string varPara) {
            return base.Channel.GetFormInfo(varPara);
        }
        
        public System.Threading.Tasks.Task<string> GetFormInfoAsync(string varPara) {
            return base.Channel.GetFormInfoAsync(varPara);
        }
        
        public string GetWFFormID(string varPara) {
            return base.Channel.GetWFFormID(varPara);
        }
        
        public System.Threading.Tasks.Task<string> GetWFFormIDAsync(string varPara) {
            return base.Channel.GetWFFormIDAsync(varPara);
        }
        
        public string GetModifyFlowUser(string varPara) {
            return base.Channel.GetModifyFlowUser(varPara);
        }
        
        public System.Threading.Tasks.Task<string> GetModifyFlowUserAsync(string varPara) {
            return base.Channel.GetModifyFlowUserAsync(varPara);
        }
        
        public string GetFlowAction(string varPara) {
            return base.Channel.GetFlowAction(varPara);
        }
        
        public System.Threading.Tasks.Task<string> GetFlowActionAsync(string varPara) {
            return base.Channel.GetFlowActionAsync(varPara);
        }
        
        public string DoFormApproval(string varPara) {
            return base.Channel.DoFormApproval(varPara);
        }
        
        public System.Threading.Tasks.Task<string> DoFormApprovalAsync(string varPara) {
            return base.Channel.DoFormApprovalAsync(varPara);
        }
        
        public string GetBackFlow(string varPara) {
            return base.Channel.GetBackFlow(varPara);
        }
        
        public System.Threading.Tasks.Task<string> GetBackFlowAsync(string varPara) {
            return base.Channel.GetBackFlowAsync(varPara);
        }
        
        public string DoDel(string varPara) {
            return base.Channel.DoDel(varPara);
        }
        
        public System.Threading.Tasks.Task<string> DoDelAsync(string varPara) {
            return base.Channel.DoDelAsync(varPara);
        }
        
        public string SMERP_CreateForm(string varPara) {
            return base.Channel.SMERP_CreateForm(varPara);
        }
        
        public System.Threading.Tasks.Task<string> SMERP_CreateFormAsync(string varPara) {
            return base.Channel.SMERP_CreateFormAsync(varPara);
        }
        
        public string SMERP_GetTempPath() {
            return base.Channel.SMERP_GetTempPath();
        }
        
        public System.Threading.Tasks.Task<string> SMERP_GetTempPathAsync() {
            return base.Channel.SMERP_GetTempPathAsync();
        }
        
        public string ERP_UploadPIC(string strMark, string strPath, string pUserId, string tFileName) {
            return base.Channel.ERP_UploadPIC(strMark, strPath, pUserId, tFileName);
        }
        
        public System.Threading.Tasks.Task<string> ERP_UploadPICAsync(string strMark, string strPath, string pUserId, string tFileName) {
            return base.Channel.ERP_UploadPICAsync(strMark, strPath, pUserId, tFileName);
        }
        
        public string ERP_DoAction(string pXml) {
            return base.Channel.ERP_DoAction(pXml);
        }
        
        public System.Threading.Tasks.Task<string> ERP_DoActionAsync(string pXml) {
            return base.Channel.ERP_DoActionAsync(pXml);
        }
        
        public string doAsyncToERPCreate(string pFormId, string pSheetNo, string pXML, string pERPServerIp, string pModiProg) {
            return base.Channel.doAsyncToERPCreate(pFormId, pSheetNo, pXML, pERPServerIp, pModiProg);
        }
        
        public System.Threading.Tasks.Task<string> doAsyncToERPCreateAsync(string pFormId, string pSheetNo, string pXML, string pERPServerIp, string pModiProg) {
            return base.Channel.doAsyncToERPCreateAsync(pFormId, pSheetNo, pXML, pERPServerIp, pModiProg);
        }
        
        public string ERPFormDefinition(string pXml) {
            return base.Channel.ERPFormDefinition(pXml);
        }
        
        public System.Threading.Tasks.Task<string> ERPFormDefinitionAsync(string pXml) {
            return base.Channel.ERPFormDefinitionAsync(pXml);
        }
        
        public string ERPPreSendEFForm(string pXML) {
            return base.Channel.ERPPreSendEFForm(pXML);
        }
        
        public System.Threading.Tasks.Task<string> ERPPreSendEFFormAsync(string pXML) {
            return base.Channel.ERPPreSendEFFormAsync(pXML);
        }
        
        public string TipTopCoordinator(string strXMLInput) {
            return base.Channel.TipTopCoordinator(strXMLInput);
        }
        
        public System.Threading.Tasks.Task<string> TipTopCoordinatorAsync(string strXMLInput) {
            return base.Channel.TipTopCoordinatorAsync(strXMLInput);
        }
        
        public string EFPubliceCoordinator(string strXMLInput) {
            return base.Channel.EFPubliceCoordinator(strXMLInput);
        }
        
        public System.Threading.Tasks.Task<string> EFPubliceCoordinatorAsync(string strXMLInput) {
            return base.Channel.EFPubliceCoordinatorAsync(strXMLInput);
        }
        
        public string YiFeiCoordinator(string strXMLInput) {
            return base.Channel.YiFeiCoordinator(strXMLInput);
        }
        
        public System.Threading.Tasks.Task<string> YiFeiCoordinatorAsync(string strXMLInput) {
            return base.Channel.YiFeiCoordinatorAsync(strXMLInput);
        }
        
        public object[] EasyFlowCoordinator(string pXML) {
            return base.Channel.EasyFlowCoordinator(pXML);
        }
        
        public System.Threading.Tasks.Task<object[]> EasyFlowCoordinatorAsync(string pXML) {
            return base.Channel.EasyFlowCoordinatorAsync(pXML);
        }
        
        public object[] PubEasyFlowCoordinator(string pXML, string pProd) {
            return base.Channel.PubEasyFlowCoordinator(pXML, pProd);
        }
        
        public System.Threading.Tasks.Task<object[]> PubEasyFlowCoordinatorAsync(string pXML, string pProd) {
            return base.Channel.PubEasyFlowCoordinatorAsync(pXML, pProd);
        }
        
        public string GetOSVersion() {
            return base.Channel.GetOSVersion();
        }
        
        public System.Threading.Tasks.Task<string> GetOSVersionAsync() {
            return base.Channel.GetOSVersionAsync();
        }
        
        public string GetCPUMode() {
            return base.Channel.GetCPUMode();
        }
        
        public System.Threading.Tasks.Task<string> GetCPUModeAsync() {
            return base.Channel.GetCPUModeAsync();
        }
    }
}
